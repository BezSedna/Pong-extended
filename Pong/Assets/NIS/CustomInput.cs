//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/NIS/CustomInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInput"",
    ""maps"": [
        {
            ""name"": ""Players"",
            ""id"": ""e763962e-482f-4592-95c9-2cc8b77aa2c7"",
            ""actions"": [
                {
                    ""name"": ""Player_One_Movement"",
                    ""type"": ""Value"",
                    ""id"": ""2a0e6763-34ac-4b7e-b627-a6e235792391"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Player_Two_Movement"",
                    ""type"": ""Value"",
                    ""id"": ""73ad7006-af45-455e-b81b-3f719c3772ff"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""up/down(w/s)"",
                    ""id"": ""c60718d3-905a-4c2e-bb6d-5a8000330eba"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_One_Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3b25418e-0e36-4482-8963-21b39149445b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_One_Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c2a526e4-a295-4572-8aac-af08a5ae54fa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_One_Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up/down(arrows)"",
                    ""id"": ""548b63dd-7583-4f9f-bd7b-ca13a63e825b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Two_Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c4093f8f-f77f-4e90-8e24-6eaa8053d8ed"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Two_Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""74339528-df6e-4212-b42b-1057cbc7a1c5"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Two_Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Players
        m_Players = asset.FindActionMap("Players", throwIfNotFound: true);
        m_Players_Player_One_Movement = m_Players.FindAction("Player_One_Movement", throwIfNotFound: true);
        m_Players_Player_Two_Movement = m_Players.FindAction("Player_Two_Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Players
    private readonly InputActionMap m_Players;
    private List<IPlayersActions> m_PlayersActionsCallbackInterfaces = new List<IPlayersActions>();
    private readonly InputAction m_Players_Player_One_Movement;
    private readonly InputAction m_Players_Player_Two_Movement;
    public struct PlayersActions
    {
        private @CustomInput m_Wrapper;
        public PlayersActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Player_One_Movement => m_Wrapper.m_Players_Player_One_Movement;
        public InputAction @Player_Two_Movement => m_Wrapper.m_Players_Player_Two_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Players; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayersActions set) { return set.Get(); }
        public void AddCallbacks(IPlayersActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayersActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayersActionsCallbackInterfaces.Add(instance);
            @Player_One_Movement.started += instance.OnPlayer_One_Movement;
            @Player_One_Movement.performed += instance.OnPlayer_One_Movement;
            @Player_One_Movement.canceled += instance.OnPlayer_One_Movement;
            @Player_Two_Movement.started += instance.OnPlayer_Two_Movement;
            @Player_Two_Movement.performed += instance.OnPlayer_Two_Movement;
            @Player_Two_Movement.canceled += instance.OnPlayer_Two_Movement;
        }

        private void UnregisterCallbacks(IPlayersActions instance)
        {
            @Player_One_Movement.started -= instance.OnPlayer_One_Movement;
            @Player_One_Movement.performed -= instance.OnPlayer_One_Movement;
            @Player_One_Movement.canceled -= instance.OnPlayer_One_Movement;
            @Player_Two_Movement.started -= instance.OnPlayer_Two_Movement;
            @Player_Two_Movement.performed -= instance.OnPlayer_Two_Movement;
            @Player_Two_Movement.canceled -= instance.OnPlayer_Two_Movement;
        }

        public void RemoveCallbacks(IPlayersActions instance)
        {
            if (m_Wrapper.m_PlayersActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayersActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayersActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayersActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayersActions @Players => new PlayersActions(this);
    public interface IPlayersActions
    {
        void OnPlayer_One_Movement(InputAction.CallbackContext context);
        void OnPlayer_Two_Movement(InputAction.CallbackContext context);
    }
}
